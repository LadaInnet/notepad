# encoding: utf-8
#
# Базовый класс «Запись» — здесь мы определим основные методы и свойства,
# общие для всех типов записей.
class Post
  # Метод post_types класса Post, возвращает всех известных ему детей класса
  # Post в виде массива классов.
  #
  # Обратите внимание, что класс, объявленный с self. перед название — это не
  # метод экземпляра класса, а метод самого класса (их ещё часто называют
  # статические методы).
  def self.post_types
    [Memo, Task, Link]
  end

  # Строго говоря этот метод self.types не очень хорош — код родительского
  # класса в идеале не должен никак зависеть от того, какие у него дети. Мы его
  # использовали для простоты (адекватно поставленной задаче).
  #
  # В сложных приложениях это делается немного иначе: например отдельный класс
  # владеет всей информацией, и умеет создавать нужные объекты (т. н. шаблон
  # проектирования «Фабрика»).
  #
  # Или каждый дочерний класс динамически регистрируется в подобном массиве
  # сам во время загрузки программы.
  #
  # Подробнее об этом вы можете прочитать в книгах о паттернах проектирования,
  # ссылки на которых приведены в дополнительных материалах.

  # Метод create класса Post динамически (в зависимости от параметра) создает
  # объект нужного класса (Memo, Task или Link) из набора возможных детей,
  # получая список с помощью метода post_types, объявленного выше.
  def self.create(type_index)
    post_types[type_index].new
  end

  # В конструкторе класса определим две переменные экзмепляра: дату создания
  # записи @created_at (текущий момент) и массив строк записи @text (пустой)
  def initialize
    @created_at = Time.now
    @text = []
  end

  # Метод read_from_console вызываться в программе когда нужно считать ввод
  # пользователя и записать его в нужные поля объекта.
  def read_from_console
    # Этот метод должен быть реализован у каждого ребенка, так как именно они
    # знают, как именно считывать свои данные из консоли.
  end

  # Метод to_strings возвращает экземпляр класса в виде массива строк, готовых
  # к записи в файл.
  def to_strings
    # Этот метод должен быть реализован у каждого ребенка, так как именно они
    # знают как именно хранить перевести себя в массив строк.
  end

  # Метод save записывает текущее состояние объекта в файл. Ему все равно,
  # экземпляр какого именно класса мы записываем, т.к. он вызывает универсальные
  # методы file_path для получения пути к файлу и to_strings для получения строк
  # для записи.
  def save
    file = File.new(file_path, 'w:UTF-8') # открываем файл на запись

    # Идем по массиву строк, полученных из метода to_strings, который будет
    # реализован у ребенка и записываем все строки в файл.
    to_strings.each do |string|
      file.puts(string)
    end

    # Или такая запись тоже сработает корректно:
    # to_strings.each { |string| file.puts(string) }

    #Можно так тоже:
    #for item in string do
    # file.puts(item)
    #end

    file.close

  end

  # Метод file_path общий для всех классов, он возвращающает путь к файлу, куда
  # записывать текущий экземпляр.
  def file_path
    # Сохраним в переменной current_path место, откуда запустили программу
    current_path = File.dirname(__FILE__)

    # Получим имя файла из даты создания поста и названия класса. Метод strftime
    # формирует строку типа "2016-12-27_12-08-31.txt". Обратите внимание, мы
    # добавили в название файла даже секунды (%S) — это обеспечит уникальность
    # имени файла. А с помощью метода class, вызванного у экземпляра класса
    # мы получим нужный класс, чтобы файл назывался, например:
    #
    # link_2016-12-27_12-08-31.txt
    file_name = @created_at.strftime("#{self.class.name}_%Y-%m-%d_%H-%M-%S.txt")

    # Склеиваем путь из относительного пути к папке и названия файла
    current_path + '/' + file_name
  end

  # Еще способ записи метода file_path:
  # def file_path
  #   current_path = File.dirname(__FILE__)

  #   file_time = @created_at.strftime('%Y-%m-%d_%H-%M-%S')

  #   "#{current_path}/#{self.class.name}_#{file_time}.txt"
  # end

end

# Весь набор методов, объявленных в родительском классе называется интерфейсом
# класса. Дети могут по–разному реализовывать методы, но они должны подчиняться
# общей идее и набору функций, которые заявлены в базовом (родительском классе).
#
# В других языках (например, Java) методы, объявленные в классе, но пустые
# называются абстрактными (здесь это методы to_strings и read_from_console).
#
# Смысл абстрактных методов в том, что можно писать базовый класс и пользоваться
# этими методами, как будто они уже реализованы, не задумываясь о деталях. С
# деталями реализации методов уже заморачиваются дочерние классы.
#